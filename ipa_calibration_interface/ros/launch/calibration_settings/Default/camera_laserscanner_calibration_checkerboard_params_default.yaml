# List of cameras invloved in calibration
# format: [camera1_name, camera1_dof, camera1_max_delta_angle
#          camera2_name, camera2_dof, camera2_max_delta_angle]
# cameraX_name can be any name to distinguish different cameras inside the interface
# max_delta_angle is a security measure to avoid movement when target angles and current angles of a camera are not too far away from one another.
# This can lead to collision issues for some cameras (e.g. when attached to an arm). Setting it to 0 turns it off (only recommended for pan/tilt cameras)
# vector<string>
cameras_list: ["cam1", "2", "0"]

# ranges for the degrees of freedom of the robot, relative to reference_frame
# each parameter is set as [min_value, step, max_value]
# vector<double>
x_range: [0.0, 0.25, -0.5]       # in [m]
y_range: [0.0, 1.0, 0.0]         # in [m]
phi_range: [0.0, 1.0, 0.0]       # in [rad]

cam1_ranges: [0.0, 1.0, 0.0,
              0.0, 1.0, 0.0]     # first pan then tilt in [rad]

# further cameras possible
#<camera2_name>_ranges: []

# manually input of configurations for corresponding camera in camera_list
# the configs list will be used over the ranges list
# vector<double>
#cam1_configs: []

# further cameras possible
#<camera2_name>_configs: []

# list of robot's base configurations used in calibration for observing the pitags measured relative to the reference_frame coordinate system that is similarly aligned as the robot's base_link
# manually input of configurations, the configs list will be used over the range lists (x_range, y_range, phi_range)
# each base configuration will go through every camera's configuration
# vector<double>
base_configs: []

# the robot's base moves until base_frame is correctly aligned relative to the reference_frame as given in the base configurations
base_frame: "base_link"

# the name of the detected reference frame. Should match the entry found in the relative_localization yaml files.
# string
reference_frame: "/landmark_reference_nav"

# controller error (between reference_frame and base_frame) will be transformed in the controller_frame before being applied to the motors
# string
controller_frame: "base_link"

# max distance (radius) the referenece_frame is allowed to be away in terms of the robot's base_frame
# double
max_ref_frame_distance: 2.5

# collection of uncertainties. each uncertainty consists of 5 parameters:
# [parent frame, child frame, last parent-branch frame (directly connected to parent marker), last child-branch frame (directly connected to child marker), parent marker, child marker]
# the uncertainties will be calibrated in the same order they appear in the uncertainties_list
# last parent-branch frame and last child-branch frame have to be available from TF from the very beginning, so that the routine can build the kinematic chains
# only transforms prior to last parent-branch frame and last child-branch frame can be used as uncertainties
uncertainties_list: []


# number of optimization iterations
# int
optimization_iterations: 10000

# timeout after which a TF transform won't be used for calibration anymore
# double
transform_discard_timeout: 2.0

# storage folder that holds the calibration output
# string
calibration_storage_path: "calibration"
